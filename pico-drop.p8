pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
--pico-drop
--by _gekko_

--Game
--main
game={}; -- game state
camera(0,0);
-- board vars
brds={};
b_col={7,48};
b_row={11,80};
brd_x={0,72};
-- player vars
n_pl=2; -- num_players
scores={};
pl_x={24,96};
-- text vars
txt_y=96;
txt_debug={0,104};

function _init()
  start_game();
end

function start_game()
  score={0,0};
  
  local b=init_brd();
  add_rs(b,4);
  
  add(brds,b);
  add(brds,cpy_brd(b));
  
  game.upd=upd_game;
  game.drw=drw_game;
end

function _update()
  game.upd();
end

function upd_game()
  for i=n_pl,1,-1 do
    upd_brd(i);
    upd_pl(i);
  end
end



function _draw()
  game.drw();
end

function drw_game()
  --printh("----- drw_game() -----");
  cls();
  map(0,0,0,0,16,16); 
  
  for i=n_pl,1,-1 do
    drw_brd(i);
    drw_pl(i);
  end
end

-- converts anything to string, even nested tables
function tostring(any)
    if type(any)=="function" then 
        return "function" 
    end
    if any==nil then 
        return "nil" 
    end
    if type(any)=="string" then
        return any
    end
    if type(any)=="boolean" then
        if any then return "true" end
        return "false"
    end
    if type(any)=="table" then
        local str = "{ "
        for k,v in pairs(any) do
            str=str..tostring(k).."->"..tostring(v).." "
        end
        return str.."}\n"
    end
    if type(any)=="number" then
        return ""..any
    end
    return "unkown" -- should never show
end

--Player
function upd_pl(pl)
  if btnp(0,pl-1) 
  and pl_x[pl] > brd_x[pl] then
    pl_x[pl]-=8;
  end
  if btnp(1,pl-1)
  and pl_x[pl] < pl_lim(pl) then
    pl_x[pl]+=8;
  end
end

function drw_pl(pl)
  spr((pl*2)-1,pl_x[pl],b_row[2]);
end

function pl_lim(pl)
  return b_col[2]+brd_x[pl];
end

--Board
function init_brd()
  --printh("----- init_brd() -----");
  local b={};
  for i=b_row[1],1,-1 do
    local r=gen_r(true);
    add(b,r);
  end
  return b;
end

function upd_brd(brd)
  if(0>=t()%5) then
    add_rs(brds[brd],1);
  end
end

function drw_brd(pl)
  --printh("----- drw_brd(pl)-----");
  b=brds[pl];
  for i=7*b_row[1],1,-1 do
    local y=i%b_row[1];
    --printh("----- init_brd() ["..(i%7+1)..","..(y%b_row[1]+1).."]");
    spr(b[y+1][i%7+1],(i%7*8)+brd_x[pl],y*8);
  end
end

function shift_rs(brd)
  --printh("----- shift_rs(brd) -----");
  for i=b_row[1],1,-1 do
    if(empty_r(brd[i]) != true) then
      brd[i+1]=brd[i];
      brd[i]=gen_r(true);
    end
  end
end

function cpy_brd(o_brd)
    local b_cpy = {}
    for o_k, o_val in pairs(o_brd) do
      b_cpy[o_k] = o_val
    end    
    return b_cpy
end

--Row
function gen_r(blnk)
  local r={};
  for i=b_col[1],1,-1 do
    local d=gen_drp(blnk);
    add(r,d);
  end
  return r;
end

function add_rs(b,n)
  --printh("----- add_rs(b,n) -----");
  for i=n,1,-1 do
    local nr=gen_r(false);
    if empty_r(b[1]) then b[1]=nr;
    else
      shift_rs(b);
      b[1]=nr;
    end;
  end  
end

function updentity()
end



function empty_r(r)
  local ds=r; -- r{{}}
  for d in all(ds) do
    if(d!=5) then return false; end
  end
  return true;
end

function get_r(brd,i)
  return brd[i];
end

--Drop
function gen_drp(blnk)
  return blnk and 5 or rnd_d();
end

function updentity()
end

function drwentity()
end

function rnd_d()
  return flr(rnd(10)<9.5 and rnd(4)+32 or rnd(5)+36);
end

__gfx__
0000000003300880033008800cc008800cc008800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000a033880aaf3388faa0cc880aafcc88fa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700003ff800083ff88000cff80008cff8800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0007700000ffff0008ffff8000ffff0008ffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0007700008a88a8000a88a0008a88a8000a88a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700f0aaaa0f00aaaa00f0aaaa0f00aaaa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000a00a0000a00a0000a00a0000a00a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000003300330033003300cc00cc00cc00cc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000009a00000099999999000000a9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000009a000000aaaaaaaa000000a9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000009a00000000000000000000a9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000009a00000000000000000000a9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000009a00000000000000000000a9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000009a00000000000000000000a9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000009a00000000000000000000a9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000009a00000000000000000000a9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0099900000ccc0000088800000bbb000007990000007000000070000000700000066600000000000000000000000000000000000000000000000000000000000
097999000c7ccc00087888000b7bbb0000090000007cc00000788000007bb0000776770000000000000000000000000000000000000000000000000000000000
97999990c7ccccc087888880b7bbbbb00799990077ccccc00708080007bbbb006766676000000000000000000000000000000000000000000000000000000000
97999990c7ccccc087888880b7bbbbb00079900007cccc007888888007bbbb006666666000000000000000000000000000000000000000000000000000000000
99999990ccccccc088888880bbbbbbb00079900007cccc000708080007bbbb006766676000000000000000000000000000000000000000000000000000000000
099999000ccccc00088888000bbbbb00007990000cc0cc0000080000000b00000776770000000000000000000000000000000000000000000000000000000000
0099900000ccc0000088800000bbb000000900000c000c000088800000bbb0000066600000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000004000000000000000000000000000000000400000004000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0806060606060611130605050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1705050705050511130605050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0805050507160511130605050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0805070505050511130705050715051800050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0805050505050511130705050005070500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000011130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000011130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000011130000000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000011130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000011130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000011130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1212121212121200001212121212121200090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
